buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven {
            name = 'MinecraftForge'
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:6.0.24'
        classpath 'org.parchmentmc:librarian:1.15.0'
    }
}

version = '1.0.0'
group = 'com.github.alexthe666'

allprojects {
    repositories {
        // Put repositories for dependencies here
        // ForgeGradle automatically adds the Forge maven and Maven Central for you

        // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
        // flatDir {
        //     dir 'libs'
        // }
        maven {
            // location of the maven that hosts JEI files since January 2023
            name = 'Modmaven'
            url = 'https://modmaven.dev'
            // for JEI API
            content {
                includeGroup "mezz.jei"
            }
        }
        
        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        
        mavenCentral()
    }
    
    java.toolchain.languageVersion = JavaLanguageVersion.of(21)
}

subprojects {
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'org.parchmentmc.librarian.forgegradle'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'java'
    
    version = '1.0.0'
    group = 'com.github.alexthe666'
    archivesBaseName = project.name

    // Mojang ships Java 21 to end users in 1.21.1+, so your mod should target Java 21.
    java.toolchain.languageVersion = JavaLanguageVersion.of(21)

    println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
    
    minecraft {
        // The mappings can be changed at any time and must be in the following format.
        // Channel:   Version:
        // official   MCVersion             Official field/method names from Mojang mapping files
        // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official

        // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
        // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md

        // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
        // Additional info can be found at https://parchmentmc.org

        // Use non-default mappings at your own risk. They may not always work.
        // Simply re-run your setup task after changing the mappings to update your workspace.
        mappings channel: 'official', version: '1.21.1'

        // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
        // In most cases, it is not necessary to enable.
        // enableEclipsePrepareRuns = true
        // enableIdeaPrepareRuns = true

        // This property allows configuring Gradle's ProcessFork options for the game and server run configurations.
        // It does not affect the toolchain Java version.
        // Defaults to the build.gradle.kts or build.gradle Java version.
        // gameJavaVersion = JavaVersion.VERSION_21
        // serverJavaVersion = JavaVersion.VERSION_21

        // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

        // Default run configurations.
        // These can be tweaked, removed, or duplicated as needed.
        runs {
            // applies to all the run configs below
            configureEach {
                // Recommended logging data for a userdev environment
                // The markers can be added/removed as needed separated by commas.
                // "SCAN": For mods scan.
                // "REGISTRIES": For firing of registry events.
                // "REGISTRYDUMP": For getting the contents of all registries.
                property 'forge.logging.markers', 'REGISTRIES'

                // Recommended logging level for the console
                // You can set various levels here.
                // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
                property 'forge.logging.console.level', 'debug'

                mods {
                    citadel {
                        source sourceSets.main
                    }
                }
            }

            client {
                // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
                property 'forge.enabledGameTestNamespaces', 'citadel'
                workingDirectory project.file('run')
            }

            server {
                property 'forge.enabledGameTestNamespaces', 'citadel'
                args '--nogui'
                workingDirectory project.file('run')
            }

            // This run config launches GameTestServer and runs all registered gametests, then exits.
            // By default, the server will crash when no gametests are provided.
            // The gametest system is also enabled by default for other run configs under the /test command.
            gameTestServer {
                property 'forge.enabledGameTestNamespaces', 'citadel'
                workingDirectory project.file('run')
            }

            data {
                // example of overriding the workingDirectory set in configureEach above
                workingDirectory project.file('run')

                // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
                args '--mod', 'citadel', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            }
        }
    }

    sourceSets.main.resources { srcDir 'src/generated/resources' }

    dependencies {
        // Specify the version of Minecraft to use.
        // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible parchment version.
        // The userdev artifact is a special name and will get all the necessary library dependencies added automatically.
        minecraft 'net.minecraftforge:forge:1.21.1-52.0.21'

        // Example optional mod dependency with JEI
        // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
        // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
        // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
        // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

        // Example mod dependency using a mod jar from ./libs with a flat dir repository
        // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
        // The group id is ignored when searching -- in this case, it is "blank"
        // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

        // For more info:
        // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
        // http://www.gradle.org/docs/current/userguide/dependency_management.html
    }

    // This block of code expands all declared replace properties in the specified resource targets.
    // A missing property will result in an error. Properties are expanded using ${} Groovy notation.
    // When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    tasks.named('processResources', ProcessResources).configure {
        var replaceProperties = [
                minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
                forge_version: forge_version, forge_version_range: forge_version_range,
                loader_version_range: loader_version_range,
                mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                mod_authors: mod_authors, mod_description: mod_description,
        ]
        inputs.properties replaceProperties

        filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
            expand replaceProperties + [project: project]
        }
    }
}